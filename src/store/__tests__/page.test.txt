jest.mock('../../utils', () => ({
  logger: {
    logError: jest.fn()
  }
}));

import React from 'react';
import pageReducer, { pageActions, usePageSelector } from '../ducks/page';
import { createStore, applyMiddleware, combineReducers } from 'redux';
import thunk from 'redux-thunk';
import renderer from 'react-test-renderer';
import { Provider } from 'react-redux';


describe('page', () => {

  it('About', (done) => {
    const store = createStore(combineReducers({
      page: pageReducer
    }), applyMiddleware(thunk));
    expect(store.getState().page.items.About).toBe(undefined);
    store.subscribe(() => {
      let res = store.getState().page.items.About;
      expect(res.id).toBe(ARTICLE.id);
      expect(res.title).toBe(ARTICLE.title);
      expect(res.date).toBe(ARTICLE.date);
      done();
    });
    store.dispatch(pageActions.loadPage({
      slug: 'about'
    }));
  });

  it('404', (done) => {
    const store = createStore(combineReducers({
      page: pageReducer
    }), applyMiddleware(thunk));
    expect(store.getState().page.items.ThisPageDoesNotExist).toBe(undefined);
    store.subscribe(() => {
      let res = store.getState().page.items.ThisPageDoesNotExist;
      expect(res).toBe(null);
      done();
    });
    store.dispatch(pageActions.loadPage({
      slug: 'this-page-does-not-exsist'
    }));
  });

  it('usePageSelector', () => {
    const store = createStore(combineReducers({
      page: pageReducer
    }), applyMiddleware(thunk));
    let state;
    function ReadContext() {
      state = usePageSelector(s => s);
      return null;
    }
    renderer.create(
      <Provider store={store}>
        <ReadContext/>
      </Provider>
    );
    expect(state).toBe(store.getState().page);
  });

});
